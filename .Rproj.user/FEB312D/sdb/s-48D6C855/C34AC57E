{
    "contents" : "\nlibrary(psych)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(qcc)\nlibrary(igraph)\nlibrary(reshape)\nlibrary(data.table)\nlibrary(MASS)\nlibrary(splitstackshape)\nlibrary(xlsx)\nlibrary(GGally)\nlibrary(lme4)\nlibrary(reshape2)\nlibrary(compiler)\nlibrary(parallel)\nlibrary(boot)\nlibrary(FactoMineR)\nlibrary(lsr)\nlibrary(tidyr)\nlibrary(rmarkdown)\nlibrary(epitools)\nlibrary(cmprsk)\nlibrary(lattice)\nlibrary(zipcode)\nlibrary(ggmap)\nlibrary(d3heatmap)\nlibrary(igraph)\n\n\n\n#   Load both datasets\n\nsetwd(\"/Volumes/SourceFiles/Data_derived/URMC_OBESITY\")\nObesity_prov_inc <- read.csv(\"Obesity_Final_DSw_income.csv\", header=TRUE,as.is=TRUE)\nsetwd(\"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen\")\nObesity <- read.csv(\"Obesity_final_total.csv\", header=TRUE,as.is=TRUE)\nObesity_7 <- read.csv(\"Obesity_7.csv\", header=TRUE, as.is=TRUE)\n\n\n#   Merge datasets\n\nObesity_final <- merge(Obesity_prov_inc, Obesity_NPI, by = \"NPI\")\n\nObesity_NPI <- merge(Obesity_NPI,NPI, by = \"NPI\")\nattach(Obesity_NPI)\nObesity_NPI <- subset(Obesity_NPI, select=c(\"PAT_DEIDENTIFIED\",  \n                                            \"VISIT_ID\", \"ZIP\", \"AGE_ON_ADMISSION\",\n                                            \"AGE_CAT\", \"SEX\", \"BMI\", \n                                            \"BMI_CAT\", \"Obese\", \"NPI\", \"PROV_NAME\", \"DEPARTMENT_NAME\"))\n\n\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n#   1. Sort (patient / date) and Count Admissions by Patient\nObesity_sorted <- Obesity_inc[order(PAT_DEIDENTIFIED, RNDM_ADMISSION_DATE),]\n#Count the number of unique patients\ndescribe(Obesity_sorted[\"PAT_DEIDENTIFIED\"])\n\n#   2. Count the Number of Admits starting with oldest to newest by Patient Number\ncount <- data.table(Obesity_sorted)\nObesity_counted <- data.frame(count[, ADMIT_No := 1:.N, by = \"PAT_DEIDENTIFIED\"])\n#na.omit(ALL_ADULT.counted)\n#Count the number of unique patients\ndescribe(Obesity_counted[\"PAT_DEIDENTIFIED\"]) #103,840 unique PAT_DEIDENTIFIED\n\n#   3. Check datset\nhead(Obesity_counted)\ntail(Obesity_counted)\n\n#   4. Subset data for index admission only\n###############################################################################################\n##############################   Last (Max) Admit FINAL DATA SET    ################################\n#use aggregate to create new data frame with the maxima\nObesity_Last.interim <- aggregate(ADMIT_No ~ PAT_DEIDENTIFIED, Obesity_counted, max)\n# then simply merge with the original\nObesity_Last <- merge(Obesity_Last.interim, Obesity_counted)\n#write.csv(Obesity_Last, \"Downloads/Obesity_Last.csv\")\n################################################################################################\n#   5. Check data set\ntable(Obesity_Last$ADMIT_No)\ndescribe(Obesity_Last[\"PAT_DEIDENTIFIED\"]) #103,840 unique PAT_DEIDENTIFIED\n\n\n\n\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n#   Make new \"Obese\" dataset with most recent visits only\nattach(Obesity_Last)\nObese_Last <- subset(Obesity_Last, select=c(\"PAT_DEIDENTIFIED\", \"ADMIT_No\",  \n                                            \"VISIT_ID\", \"PAT_ZIP\", \"AGE_ON_ADMISSION\", \"AGE_ADULT\",\n                                            \"AGE_CAT\", \"DEPARTMENT_NAME\", \"DEPARTMENT_ID\", \"BMI\", \n                                            \"BMI_CAT\", \"SEX\", \"NPI\"))\nObese_Last <- subset(Obese_Last, BMI_CAT != 0)\nObese_Last <- subset(Obese_Last, BMI_CAT != 1)\nObese_Last <- subset(Obese_Last, BMI_CAT != 2)\nObese_Last <- subset(Obese_Last, BMI_CAT != 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n\n\n\n\n\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n#    Steps to achieve full dataset WITHOUT incomes provided\n\n#Load dataset:\nsetwd(\"/Volumes/SourceFiles/Data_original/URMC_OBESITY\")\nObesity_data <- read.delim(\"PAT_ENCOUNTERS_201510161412.txt\", quote=\"\")\n\n#   Remove extra numbers from zip codes so all are 5 digits\nObesity_data$ZIP <- gsub(Obesity_data$ZIP, pattern=\"-.*\", replacement=\"\")\n#   Make zip code numeric\nObesity_data$ZIP <- as.numeric(as.character(Obesity_data$ZIP))\n\n#   Omit anyone with missing height\nObesity_data <- Obesity_data[!(Obesity_data$HEIGHT == \"\"),]\n#   Omit anyone with missing weight\nObesity_data <- Obesity_data[!(Obesity_data$WEIGHT_OZ == \"\"),]\n\n#   Children/teens ages 2-19...?\n#   Create new variable for \"Adult? yes or no (1 or 0)\"\nattach(Obesity_data)\nObesity_data$AGE_ADULT <- Obesity_data$AGE_ON_ADMISSION\nObesity_data$AGE_ADULT[AGE_ON_ADMISSION < 20] <- 0\nObesity_data$AGE_ADULT[AGE_ON_ADMISSION >= 20] <- 1\n\n#   Create new BMI var and categorize within\nattach(Obesity_data)\nObesity_data$BMI_CAT <- Obesity_data$BMI\nattach(Obesity_data)\nObesity_data$BMI_CAT[BMI < 12] <- 0 #under omit\nObesity_data$BMI_CAT[BMI >= 12 & BMI <= 18.50] <- 1 #under\nObesity_data$BMI_CAT[BMI >= 18.50 & BMI <= 24.99] <- 2 #normal\nObesity_data$BMI_CAT[BMI >= 25.00 & BMI <= 29.99] <- 3 #over\nObesity_data$BMI_CAT[BMI >= 30.00 & BMI <= 39.99] <- 4 #obese\nObesity_data$BMI_CAT[BMI >= 40.00 & BMI <= 50.00] <- 5 #super obese\nObesity_data$BMI_CAT[BMI > 50.00] <- 6 #over omit\n\n#   Create new AGE var and categorize within\nattach(Obesity_data)\nObesity_data$AGE_CAT <- Obesity_data$AGE_ON_ADMISSION\nattach(Obesity_data)\nObesity_data$AGE_CAT[AGE_ON_ADMISSION < 20] <- 1 #less_than_20\nObesity_data$AGE_CAT[AGE_ON_ADMISSION >= 20 & AGE_ON_ADMISSION <= 39] <- 2 #20_to_39\nObesity_data$AGE_CAT[AGE_ON_ADMISSION >= 40 & AGE_ON_ADMISSION <= 59] <- 3 #40_to_59\nObesity_data$AGE_CAT[AGE_ON_ADMISSION >= 60] <- 4 #60_or_greater\n\n#   Omit anyone with <12 BMI\nObesity2 <- subset(Obesity_data, BMI_CAT != 0)\n#   Omit anyone with >50 BMI\nObesity3 <- subset(Obesity2, BMI_CAT != 6)\n#   Omit anyone with unknown sex\nObesity <- subset(Obesity3, PAT_DEIDENTIFIED != 1940302)\n\n#   Create separate Children dataset\nChildren <- subset(Obesity, select = c(\"PAT_DEIDENTIFIED\",\"ZIP\",\"AGE_ON_ADMISSION\",\n                                       \"AGE_ADULT\",\"BMI\",\"ETHNICITY\",\"SEX\",\"DEPARTMENT_NAME\",\n                                       \"NPI\"))\nChildren <- subset(Children, AGE_ADULT != 1)\n\n#   Omit children -> adults only dataset\nObesity <- subset(Obesity, AGE_ADULT != 0)\n\n#   Omit OB/GYN units:\nObesity <- Obesity[!(Obesity$DEPARTMENT_ID %in% c(101001004, 101001005, 101001006, 101001007,\n                                                  101001009, 101001010, 101005004, 101005005,\n                                                  101005006, 101005007, 101005008, 101005009,\n                                                  101005011, 101005012, 101040004, 101055002,\n                                                  101055003, 101055004, 101055005, 101055007,\n                                                  101055008, 101055011, 101070015, 102001002,\n                                                  102001003, 102001010, 102001022, 102013002,\n                                                  102014007, 102014008, 102014010, 102030001,\n                                                  102031001, 102031002, 102031003, 102031004)),]\nObesity <- Obesity[!(Obesity$LMP_NAME %in% c(\"Pregnancy suspected\", \"Recent pregnancy\")),]\n\n#   Omit missing NPI\n#   Create function to omit NA in only one variable\ncompleteFun <- function(data, desiredCols) {completeVec <- complete.cases(data[, desiredCols])\n  return(data[completeVec, ])}\n#   Omit NA in NPI variable only\nObesity <- completeFun(Obesity,\"NPI\")\n\n#   Create separate Obese dataset\nObese <- subset(Obesity, select=c(\"PAT_DEIDENTIFIED\", \"ZIP\", \"AGE_ON_ADMISSION\", \"AGE_ADULT\",\n                                  \"AGE_CAT\", \"BMI\", \"BMI_CAT\", \"ETHNICITY\", \"SEX\", \"NPI\"))\nObese <- subset(Obese, BMI_CAT != 0)\nObese <- subset(Obese, BMI_CAT != 1)\nObese <- subset(Obese, BMI_CAT != 2)\nObese <- subset(Obese, BMI_CAT != 3)\n\n\n#   Write csv for both final datasets\nwrite.csv(Obesity, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/Obesity_final_total.csv\", row.names=FALSE)\n\n\n\n\n\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n\n#   Take only most recent pt visits\n\n#--------------------------------------------------------------------------------------------------------#\n# ---------------------       Add visit number to both SMH_Admits_Inc data set      ---------------------#\n# ---------------------       We will only be using Index admission for each        ---------------------#\n#--------------------------------------------------------------------------------------------------------#\n\n\nattach(Obesity)\n\nObesity_try <- Obesity\n\n#convert ADMIT_DATE & DISCHARGE_DATE to date format and sort by that date\nObesity_try$RNDM_ADMISSION_DATE <-as.character(Obesity_try$RNDM_ADMISSION_DATE)\n#convert ADMIT_DATE & DISCHARGE_DATE to date format and sort by that date\nObesity_try$RNDM_ADMISSION_DATE <- as.Date(Obesity_try$RNDM_ADMISSION_DATE, format = \"%m/%d/%Y\")\n\nattach(Obesity_inc)\n#   1. Sort (patient / date) and Count Admissions by Patient\nObesity_sorted <- Obesity_try[order(PAT_DEIDENTIFIED, RNDM_ADMISSION_DATE),]\n#Count the number of unique patients\ndescribe(Obesity_sorted[\"PAT_DEIDENTIFIED\"])\n\n#   2. Count the Number of Admits starting with oldest to newest by Patient Number\ncount <- data.table(Obesity_sorted)\nObesity_counted <- data.frame(count[, ADMIT_No := 1:.N, by = \"PAT_DEIDENTIFIED\"])\n#na.omit(ALL_ADULT.counted)\n#Count the number of unique patients\ndescribe(Obesity_counted[\"PAT_DEIDENTIFIED\"]) #103,840 unique PAT_DEIDENTIFIED\n\n#   3. Check datset\nhead(Obesity_counted)\ntail(Obesity_counted)\n\n#   4. Subset data for index admission only\n###############################################################################################\n##############################   Last (Max) Admit FINAL DATA SET    ################################\n#use aggregate to create new data frame with the maxima\nObesity_Last.interim <- aggregate(ADMIT_No ~ PAT_DEIDENTIFIED, Obesity_counted, max)\n# then simply merge with the original\nObesity_Last <- merge(Obesity_Last.interim, Obesity_counted)\n#write.csv(Obesity_Last, \"Downloads/Obesity_Last.csv\")\n################################################################################################\n#   5. Check data set\ntable(Obesity_Last$ADMIT_No)\ndescribe(Obesity_Last[\"PAT_DEIDENTIFIED\"]) #103,840 unique PAT_DEIDENTIFIED\n\n#   write csv for Obesity_last -> most recent patient visit only\nwrite.csv(Obesity_Last, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/Obesity_most_recent_visit_only.csv\", row.names=FALSE)\n\n\n\n################################################################################################\n\n#   NORMALIZE AGE\n\n#   Create normalized age column\nObesity_Last$AGE_NORM <- Obesity_Last$AGE_ON_ADMISSION\n#   Create function in R... from: http://vitalflux.com/data-science-scale-normalize-numeric-data-using-r/\nnormalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}\n#   Normalize using function above\ndf_norm <- as.data.frame(lapply(Obesity_Last$AGE_NORM,normalize))\n\n\n\n\n\n\n# -----------------------------------------------------------------------------\n\n\n\n\n#   Freq table for age v bmi range                                          \nattach(Obesity_Last)\nfreq <- subset(AGE_ON_ADMISSION,BMI_CAT==5)\nsummary(freq)\n\n#   Freq table for sex v bmi\nattach(Obese_Last)\nfreq <- table(AGE_CAT,SEX,BMI_CAT)\nftable(freq)\n\ndescribe(Obesity$ZIP==14476)\n\n\n\n#---------------------------------------------------------------------------------------------\n\n\n#   Histogram/Plotting misc for BMI\n\nbarplot(BMI_CAT, beside=TRUE)\n\nObesity_BMI <- Obesity_data[,names(Obesity_data) %in% c(\"BMI_under\", \"BMI_normal\", \"BMI_over\",\n                                                           \"BMI_obsese\")]\nhist(Obesity_7$BMI_CAT,xlim=c(0,4),xlab=\"BMI Categories\",main=\"BMI Categories Histogram\")\n\nhist(Obesity_data$AGE_ON_ADMISSION)\nboxplot(Obesity_data$AGE_ON_ADMISSION)\n\nhist(Obesity$AGE_ON_ADMISSION)\nhist(Obesity$BMI_CAT)\nhist(Obesity$AGE_CAT)\n\nhist(Obesity$BMI_CAT)\n\nhist(Children$BMI)\nhist(Children$AGE_ON_ADMISSION)\n\nboxplot(Children$BMI)\n\nattach(Obesity_data)\nbagplot(AGE_ON_ADMISSION,BMI,main=\"Age vs. BMI Bagplot\",xlab=\"Age (years)\", ylab=\"BMI\",ylim=c(0,80),xlim=c(0,100))\n\nplot(Obesity_7$Pat_Prov.dist.1,Obesity_7$BMI_CAT)\nplot(Children$BMI)\nplot(Adults$BMI)\n\nplot(Obesity_Last$BMI)\n\n#   Side by side male and female histograms\n#   Omit the one obs with missing sex\nObesity <- Obesity[!(Obesity$SEX == \"Unknown\"),]\nhistogram(~ BMI_CAT | SEX, data=Obesity)\nhistogram(~ BMI | SEX, data=Obesity)\nhistogram(~ BMI | AGE_ADULT, data=Obesity)\nhistogram(~ BMI | SEX, data=Children)\n\n\n#   Side by side ethnicity histograms\nhistogram(~ BMI_CAT | Median_income_est, data=Obesity_7, main=\"BMI Categories by Income\")\n\n\n\n#   Density plots from Robert\n#   Continuous variable stratified by a binary variable such as sex\nObesity <- qplot(BMI, data=Obese_Last, geom=\"density\",\n                         fill=SEX, alpha=I(.5), main=\"BMI Distribution by Sex\",\n                         xlab=\"BMI\", ylab=\"Density\")\nObesity + scale_fill_manual(values=c(\"red\",\"darkblue\"))\n\n#   Single continuous variable not stratified by anything\nObesity_density <- qplot(BMI, data=Children, geom=\"density\",\n                         alpha=I(.5), main=\"BMI Distribution\",\n                         xlab=\"BMI\", ylab=\"Density\")\nObesity_density + scale_fill_manual(values=c(\"darkblue\"))\n\n#   Box plot\nObesity_box <- qplot(SEX, BMI, data=Adults, geom=c(\"boxplot\"), fill=SEX,\n                     main=\"Boxplot: BMI by Sex\", xlab=\"Sex\", ylab=\"BMI\")\nprint(Obesity_box)\n\nObesity_box <- qplot(SEX, AGE_ON_ADMISSION, data=Adults, geom=c(\"boxplot\"), fill=SEX,\n                     main=\"Boxplot: Age by Sex\", xlab=\"Sex\", ylab=\"Age\")\nprint(Obesity_box)\n\n\n\n#--------------------------------------------------------------------------\n\n#   HEAT MAPPING\n\n\ngg_data <- Obesity_data[,names(Obesity_data) %in% c(\"BMI_CAT\", \"ZIP\")]\ngg_data <- with(gg_data,reorder(ZIP,BMI_CAT))\ngg_data_m <- melt(gg_data)\ngg_data_m <- ddply(gg_data_m,.(variable),transform,rescale=rescale(value))\n\ngg_data_m <- ddply(gg_data_m, .(BMI_CAT), transform)\ngplot1 <- ggplot(gg_data_m, aes(variable,BMI_obese)) + geom_tile(aes(fill=rescale), + scale_fill_gradient(low=\"white\", + high=\"steelblue\"))\n\n#   Something wrong with equal signs in code below\ngg2 <- ggplot(gg_data, aes(BMI_obese)) + geom_tile(aes(fill=rescale)) + scale_fill_gradient(low = \"white\", + high = \"steelblue\")\ngg2\n\n#   All code below is correct, but need proper format of gg_data for it to produce heat map\ngg <- ggplot(gg_data_m, aes(x=BMI_CAT, y=ZIP))\ngg <- gg + geom_tile(color=\"white\", size=0.1 )\ngg <- gg + scale_fill_viridis(name=\"# Events\", label=comma)\ngg <- gg + coord_equal()\ngg <- gg + labs(x=NULL, y=NULL, title=\"BMI by Zip Code\")\ngg <- gg + theme_tufte(base_family = \"Helvetica\")\ngg <- gg + theme(plot.title=element_text(hjust=0))\ngg <- gg + theme(axis.ticks=element_blank())\ngg <- gg + theme(axis.text=element_text(size=7))\ngg <- gg + theme(legend.title=element_text(size=8))\ngg <- gg + theme(legend.text=element_text(size=6))\ngg\nprint(gg)\n\n\n#   Using d3heatmap package from R bloggers\n\nattach(Obesity_data)\nfreq_age_bmi <- table(AGE_CAT,BMI_CAT)\nftable(freq_age_bmi)\nhm_age_bmi <- d3heatmap(freq_age_bmi, scale=\"column\", dendogram=\"none\", color=\"Blues\")\nprint(hm_age_bmi)\n\n\nattach(Obesity)\nnpi_tot <- sort(table(Obesity_Last$NPI),decreasing=TRUE)[1:50]\nzip_tot <- sort(table(Obesity$ZIP),decreasing=TRUE)[1:50]\nnpi_zip <- table(npi_tot,zip_tot)\nftable(npi_zip)\nhm_npi_zip <- d3heatmap(npi_zip, scale=\"column\", dendogram=\"none\", color=\"Blues\")\nprint(hm_npi_zip)\n\n\n\n#-------------------------------------------------------------------------\n\n\n#   Most common NPI numbers\nnpi_tot <- sort(table(Obesity_Last$NPI),decreasing=TRUE)[1:200]\n\n#   Most common zip codes\nzip_total <- sort(table(Obesity$ZIP),decreasing=TRUE)[1:100]\n\n#   Most common zip codes\nzip_tot <- sort(table(Obesity$ZIP),decreasing=TRUE)[1:50]\n#14620 14609 14611 14621 14450 14624 14606 14580 14534 14619 \n#7438  7089  7001  6585  5921  5618  5330  5151  5014  4907\n\n#   NPI numbers of Obese patients\nnpi_obesity <- sort(table(Obesity_Last$NPI),decreasing=TRUE)[1:50]\n#1275563470 1477501849 1306872155 1659311074 1487711743 1851327647 1558327999 1588829089 1801822846 \n#1154        718        700        639        627        596        576        507        491 \n#1720001860 1538253851 1023064565 1144288820 1508860248 1407995178 1043496854 1124064878 1013985886 \n#451        424        421        399        389        384        381        325        277 \n#1477571982 1538324561 \n#276        272 \n\n#   Zip codes of Obese patients\nzip_obesity <- sort(table(Obesity_Last$ZIP),decreasing=TRUE)[1:100]\n#14611 14609 14621 14620 14619 14606 14624 14608 14420 14450 14580 14623 14613 14605 14607 14534 14612 14559 \n#2939  2925  2818  2439  2151  2120  1943  1707  1673  1650  1621  1540  1321  1198  1152  1127  1103  1079 \n#14616 14618 \n#1020   914\n\n#-------------------------------------------------------------------------\n\n\n\n#   NPI and Provider compare \n\nsetwd(\"/Volumes/SourceFiles/Data_original/URMC_Providers\")\nNPI <- read.csv(\"URMC_Provider_info.csv\",header=TRUE,as.is=TRUE)\n\n#   Convert NPI from integer to character\nObesity$NPI_CHAR <- as.character(Obesity$NPI)\n\n\n\n\n\n#   Create new subset to find unique NPI numbers\nObesity_NPI <- subset(Obesity, select = c(\"PAT_DEIDENTIFIED\", \"NPI\", \"VISIT_ID\", \"ZIP\", \n                                               \"RNDM_ADMISSION_DATE\", \"AGE_ON_ADMISSION\", \n                                               \"AGE_CAT\", \"BMI\", \"BMI_CAT\", \"SEX\",\"DEPARTMENT_NAME\")) \n\nObese_NPI <- subset(Obesity_NPI, select=c(\"PAT_DEIDENTIFIED\", \"NPI\", \"VISIT_ID\", \"ZIP\", \n                                          \"RNDM_ADMISSION_DATE\", \"AGE_ON_ADMISSION\", \n                                          \"AGE_CAT\", \"BMI\", \"BMI_CAT\", \"SEX\",\"DEPARTMENT_NAME\"))\nObese_NPI <- subset(Obese_NPI, BMI_CAT != 0)\nObese_NPI <- subset(Obese_NPI, BMI_CAT != 1)\nObese_NPI <- subset(Obese_NPI, BMI_CAT != 2)\nObese_NPI <- subset(Obese_NPI, BMI_CAT != 3)                    \n\nObesity_NPI <- Obesity_NPI[!duplicated(Obesity_NPI[1:2]),]\n\n#   Now same thing for obese only\nObese_NPI <- subset(Obese, select = c(\"PAT_DEIDENTIFIED\", \"NPI\", \"ZIP\", \n                                           \"AGE_ON_ADMISSION\", \n                                          \"AGE_CAT\", \"BMI\", \"BMI_CAT\", \"SEX\")) \nObese_NPI <- Obese_NPI[!duplicated(Obese_NPI[1:2]),]\n\n\n#   write csv for NPI obesity datasets\nwrite.csv(Obesity_NPI, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/Obesity_unique_NPI.csv\", row.names=FALSE)\nwrite.csv(Obese_NPI, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/Obese_only_unique_NPI.csv\", row.names=FALSE)\n\n\n\nnpi_obese <- sort(table(Obese_NPI$NPI),decreasing=TRUE)[1:20]\nnpi_obesity <- sort(table(Obesity_NPI$NPI),decreasing=TRUE)[1:50]\n\nObesity_NPI <- subset(Obesity_NPI, select = c(\"PAT_DEIDENTIFIED\", \"NPI\", \"VISIT_ID\", \"ZIP\", \n                                          \"RNDM_ADMISSION_DATE\", \"AGE_ON_ADMISSION\", \n                                          \"AGE_CAT\", \"BMI\", \"BMI_CAT\", \"SEX\",\"DEPARTMENT_NAME\"))\n\n\n#     MODIFIED NPI ANALYSIS 5-26-16\n\n# create new var -> Obese? yes or no (1 or 0)\nattach(Obesity_NPI)\nObesity_NPI$Obese <- Obesity_NPI$BMI_CAT\nObesity_NPI$Obese[BMI_CAT==1] <- 0\nObesity_NPI$Obese[BMI_CAT==2] <- 0\nObesity_NPI$Obese[BMI_CAT==3] <- 0\nObesity_NPI$Obese[BMI_CAT==4] <- 1\nObesity_NPI$Obese[BMI_CAT==5] <- 1\n\nattach(Obesity_NPI)\nfreq_obese_npi <- subset(NPI,Obese==1)\nsummary(freq_obese_npi)\n\nNPI_toy <- subset(Obesity_NPI, select = c(\"PAT_DEIDENTIFIED\",\"VISIT_ID\", \"RNDM_ADMISSION_DATE\",\n                                             \"Obese\", \"NPI\"))\nwrite.csv(NPI_toy, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/NPI_toy_5.26.16.csv\", row.names=FALSE)\n\nObese_NPI <- subset(Obesity_NPI, select=c(\"PAT_DEIDENTIFIED\",\"VISIT_ID\", \"RNDM_ADMISSION_DATE\", \"NPI\", \"Obese\"))\nObese_NPI <- subset(Obese_NPI, Obese != 0)\n\nwrite.csv(Obese_NPI, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/NPI_obese_only_toy_5.26.16.csv\", row.names=FALSE)\n\nattach(NPI_toy)\nfreq <- table(NPI,PAT_DEIDENTIFIED)\nftable(freq)\nnpi_obesity <- sort(table(NPI_toy$NPI),decreasing=TRUE)[1:297]\nnpi_obesity\nnpi_4 <- table(NPI_toy$NPI, NPI_toy$Obese==1)\nnpi_5 <- as.data.table(npi_4)\nwrite.csv(npi_4, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/npi_4_toy_5.26.16.csv\", row.names=TRUE)\n\n\nsetwd(\"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen\")\nNPI_excel <- read.csv(\"npi_4_toy_5.26.16.csv\", header=TRUE,as.is=TRUE)\n\nNPI_KB <- merge(npi_4,NPI, by = \"NPI\")\nattach(Obesity_NPI)\nObesity_NPI <- subset(Obesity_NPI, select=c(\"PAT_DEIDENTIFIED\", \"RNDM_ADMISSION_DATE\", \n                                            \"VISIT_ID\", \"NPI\"))\n\n\n\n\n\n#   only keep NPI's with 30+ patients in our toy dataset\nNPI_toy <- NPI_toy[(NPI_toy$NPI %in% c(1275563470, 1851327647, 1477501849, 1306872155, 1659311074, \n                                        1487711743, 1538253851, 1720001860, 1407995178, 1043496854, 1588829089, 1144288820,\n                                        \n                                        1477571982, 1801822846, 1538324561, 1508860248, 1023064565, 1558327999, \n                                        1447233002, 1124064878, 1811159338, 1083678338, 1831108570, 1033150966,\n                                        \n                                        1013985886, 1164752515, 1790841500, 1508808304, 1124073937, 1528081668, 1740210939, \n                                        1073560488, 1710940788, 1750573838, 1902911704, 1629170691,\n                                        \n                                        1710154901, 1841213089, 1982851119, 1396859682, 1215000435, 1801036405, 1215946843, \n                                        1609897818, 1023184645, 1902834351, 1306854682, 1376715540,\n                                        \n                                        1922380161, 1063684736, 1962446989, 1760799571, 1417152331, 1013120344, 1992746705, \n                                        1366636458, 1164461448, 1235161340, 1760466254, 1710280904, \n                                        \n                                        1477513794, 1174562425, 1073522652, 1164466181, 1235174269, 1336177310, 1588606388, \n                                        1477590222, 1063560092, 1790713477, 1780611772, 1578887691,\n                                        \n                                        1649207127, 1689680498, 1063454866, 1952592362, 1497782304, 1902816663, 1447299714, \n                                        1144253154, 1578503975, 1386662591, 1326076209, 1073554473,\n                                        \n                                        1285770602, 1003914987, 1699721597, 1659356541, 1982694733, 1174784896, 1033146642, \n                                        1881636686, 1366475378, 1730389917, 1780649590, 1003826066,\n                                        \n                                        1750399028, 1821023854, 1528001351, 1639133044, 1205844909, 1396822706, 1073556346, \n                                        1811907504, 1972545770, 1467591909, 1609822485, 1720281991, \n                                        \n                                        1417986738, 1497758791, 1457305195, 1467616193, 1972611796, 1154361509, 1134102700, \n                                        1134103054, 1871793570, 1467573147, 1174788681, 1598717324,\n                                        \n                                        1518027747, 1508905548, 1548261530, 1205895174, 1528163979, 1255353561, 1720303118, \n                                        1326152489, 1265453328, 1154533529, 1780696740, 1417389776,\n                                        \n                                        1427087162, 1326014770, 1649358656, 1588878953, 1811900939, 1174562441, 1790712859, \n                                        1073788741, 1427060557, 1598834558, 1780889618, 1336317031,\n                                        \n                                        1821184367, 1275527566, 1831356211, 1205882859, 1295744969, 1821172388, 1568481331, \n                                        1821198912, 1104907963, 1861501413, 1336462670, 1841431145,\n                                        \n                                        1033141973, 1457390122, 1053436469, 1073621769, 1649200221, 1073576542, 1073620373, \n                                        1720081698, 1992714612, 1689631319, 1679750160, 1689692691,\n                                        \n                                        1710063581, 1124058441, 1669761821, 1770510067, 1780828533, 1801830336, 1770510836, \n                                        1366549180, 1386678563, 1710112974, 1174548671, 1427217496, \n                                        \n                                        1851319610, 1992806525, 1841308210, 1033143599, 1538484308, 1669645792, 1336151620, \n                                        1851309892, 1346561610, 1487946166, 1437151354, 1508834201,\n                                        \n                                        1700963121, 1851535116, 1902838089, 1700827425, 1528200532, 1811901135, 1245249937, \n                                        1760495816, 1114953908, 1396763967, 1841243243, 1871707919,\n                                        \n                                        1215903562, 1437254828, 1548206204, 1881635266, 1366655920, 1619904166, 1689816795, \n                                        1376862227, 1023045077, 1316056286, 1003075771, 1013973734,\n                                        \n                                        1154468833, 1255376901, 1861606717, 1053379958, 1396989869, 1417972605, 1770775470, \n                                        1083677140, 1336359777, 1063473064, 1184687188, 1780909176,\n                                        \n                                        1801805320, 1033388574, 1740505023, 1992094064, 1295795979, 1740236439, 1912943416, \n                                        1497070882, 1982631859, 1013970557, 1538196118, 1730287236, \n                                        \n                                        1942338629, 1255592945, 1407171895, 1659660819, 1720049158, 1851534010, 1932161460, \n                                        1932363843, 1457318966, 1629002605, 1902861800, 1073705182,\n                                        \n                                        1194753012, 1306857677, 1497710305, 1851333611, 1063575447, 1679593768, 1679719249, \n                                        1821016833, 1093733651, 1124034186, 1316169238, 1497073589, \n                                        \n                                        1851300495, 1861401366, 1891715587, 1063464386, 1326140542, 1417286501, 1568634814, \n                                        1154364156, 1417999236, 1588689343, 1669699518, 1679585103,\n                                        \n                                        1306073382, 1487642773, 1588609143, 1225201957, 1265507792, 1417984519, 1568406122, \n                                        1710903083, 1518935378, 1982778254, 1013189232, 1023283140,\n                                        \n                                        1205853876, 1417980087, 1518184464, 1679872808, 1922017433, 1063431690, 1144202607, \n                                        1407884471, 1780647248)),]\n\n\n\n\n\n#---------------------------------------------------------------------\n\n#   ZIP CODE ANALYSIS\n\n\n#   NEED TO CREATE NEW DATASET WITH JUST ZIP CODES AND FREQUENCY\n\n\n\n\n\n\n\n\n#   Create zip code subset\nZip <- subset(Obesity, select = c(\"ZIP\",\"BMI\"))\n\n#   Clean zip codes\nZip$ZIP<- clean.zipcodes(Zip$ZIP)\nZip <- merge(Zip, Zip)\n    \n#   Density step?\n                                    \n#   Plot zip codes\nMap1 <- get_map(location='united states', zoom=4, maptype='roadmap')\nggmap(Map1)+geom_point(aes(size=(count)),data=Zip,alpha=.5)\n\n\n\n#---------------------------------------------------------------------\n\n\n                                        \n#   Create dataset for Robert of all unique patient IDs\n\nObesity_unique <- subset(Obesity, select = c(\"PAT_DEIDENTIFIED\",\"VISIT_ID\"))\nObesity_unique <- Obesity_unique[!duplicated(PAT_DEIDENTIFIED[1:1]),]\nObesity_unique <- as.data.table(Obesity_unique)\nwrite.csv(Obesity_unique, file = \"/Volumes/SourceFiles/Data_original/URMC_OBESITY/Obesity_unique.csv\", row.names=FALSE)\n\n\n\n\n#---------------------------------------------------------------------\n\n\n\n\n#     DISTANCE AND INCOME ANALYSIS     #\n\n\n\n\n\nsetwd(\"/Volumes/SourceFiles/Data_derived/URMC_OBESITY\")\nObesity_prov_inc <- read.csv(\"Obesity_Final_DSw_income.csv\", header=TRUE,as.is=TRUE)\nsetwd(\"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen\")\nObesity_Last <- read.csv(\"Obesity_most_recent_visit_only.csv\", header=TRUE,as.is=TRUE)\n\n#   Merge dataset Obesity_prov_inc and Obesity_Last\nObesity_7 <- merge(Obesity_Last, Obesity_prov_inc, by = \"VISIT_ID\")\n\n#   Get rid of what we don't need\nattach(Obesity_7)\nObesity_7 <- subset(Obesity_7, select=c(\"PAT_DEIDENTIFIED.x\",  \n                                            \"VISIT_ID\", \"RNDM_ADMISSION_DATE\", \"ZIP\", \"AGE_ON_ADMISSION\",\n                                            \"AGE_CAT\", \"SEX\", \"BMI\", \n                                            \"BMI_CAT\", \"NPI.x\", \"Prov_Last_Name\", \"Prov_First_Name\", \"Classification\", \n                                        \"Specialization\", \"PROV_ZIP\",\n                                        \"PROV_City\", \"PROV_State\", \"PAT_ZIP\", \"PAT_City\", \"PAT_State\", \"Pat_Prov.dist.1\",\n                                        \"Median_income_est\",\n                                        \"Median_income_error\", \"Mean_income_est\", \"Mean_income_error\"))\n\nwrite.csv(Obesity_7, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/Obesity_7.csv\", row.names=TRUE)\n\n\n\n#   Make incomes integers\nObesity_7$Median_income_est <- as.numeric(as.integer(Obesity_7$Median_income_est))\n\nObesity_7$SEX <- as.numeric(as.character(Obesity_7$SEX))\n\nattach(Obesity_7)\nfreq <- subset(Median_income_est,BMI_CAT==5)\nsummary(freq)\n\n#   Export csv for income stats for excel median analysis\ninc1 <- subset(Obesity_7$Median_income_est, Obesity_7$AGE_CAT==4)\ninc1 <- as.table(inc1)\nwrite.csv(inc1, file = \"/Volumes/SourceFiles/Data_derived/URMC_OBESITY/Kristen/inc_age4.csv\", row.names=TRUE)\n\n\n\n\n###############################################################################################\n###############################################################################################\n###############################################################################################\n\n\n\n#                         igraph network practice                          #\n\n\n\n###############################################################################################\n###############################################################################################\n###############################################################################################\n#Adapted from:\n#     https://rdatamining.wordpress.com/2012/05/17/an-example-of-social-network-analysis-with-r-using-package-igraph/\n\n\n\n#############################################\n#     LOAD DATA\nsetwd(\"/Users/kristenbush/Desktop\")\nload(\"/Users/kristenbush/Desktop/termDocMatrix.rdata\")\n\n#     Inspect part of the matrix\ntermDocMatrix[5:10,1:20]\n\n\n#############################################\n#      DOCUMENT-TERM MATRIX\n#A document-term matrix or term-document matrix is a mathematical matrix that describes the frequency \n#of terms that occur in a collection of documents. In a document-term matrix, rows correspond to documents \n#in the collection and columns correspond to terms.\n#            |\n#            |\n#            |\n#            |\n#            |\n#            V\n#     TERM-TERM MATRIX\n#Need the adjacency matrix format to build a graph\n\n#############################################\n#     TRANSFORM DATA INTO AN ADJACENCY MATRIX\n\n#     Change it to a Boolean matrix\ntermDocMatrix[termDocMatrix>=1] <- 1\n\n#     Transform it into a term-term adjacency matrix\ntermMatrix <- termDocMatrix %*% t(termDocMatrix)\n\n#     Inspect items numbered 5 to 10\ntermMatrix[5:10,5:10]\n\n#############################################\n#     BUILD A GRAPH\n\n#     Build a graph from the above matrix\ng <- graph.adjacency(termMatrix, mode = \"undirected\", weighted=T)\n\n#     Remove loops\ng <- simplify(g)\n\n#     Set labels and degrees of vertices\nV(g)$label <- V(g)$name\nV(g)$degree <- degree(g)\n\n#############################################\n#     PLOT A GRAPH\n\n#     Set seed to make the layout reproducible\nset.seed(3952)\nlayout1 <- layout.fruchterman.reingold(g)\nplot(g, layout=layout1)\n\n#     Alternate layout below\nplot(g, layout=layout.kamada.kawai)\n\n#     Produces an interactive plot which allows you to manually rearrange the layout\ntkplot(g, layout=layout.kamada.kawai)\n\n#############################################\n#     MAKE IT LOOK BETTER\n\n#     Layout1 mods\nV(g)$label.cex <- 2.2 * V(g)$degree / max(V(g)$degree)+ .2\nV(g)$label.color <- rgb(0, 0, .2, .8)\nV(g)$frame.color <- NA\negam <- (log(E(g)$weight)+.4) / max(log(E(g)$weight)+.4)\nE(g)$color <- rgb(.5, .5, 0, egam)\nE(g)$width <- egam\n\n#     Plot the graph in layout1\nplot(g, layout=layout1)\n\n\n###############################################################################################\n###############################################################################################\n###############################################################################################\n\n\n###          igraph attempt - 6.7.16          ###\n\n\nObesity_igraph <- Obesity\nattach(Obesity_igraph)\nObesity_igraph <- subset(Obesity_igraph, select=c(\"PAT_DEIDENTIFIED\", \"VISIT_ID\", \"RNDM_ADMISSION_DATE\", \"NPI\"))\n\n#    Unique NPIs within each patient\nObesity_igraph <- Obesity_igraph[!duplicated(Obesity_igraph[c(1,4)]),]\n\n#     Sort by PAT_DEIDENTIFIED and then by RNDM_ADMISSION_DATE\n\nindexes <- sort(Obesity_igraph[,1],index.return=TRUE)\n#     Sorts by PAT_DEIDENTIFIED\nObesity_igraph <- Obesity_igraph[indexes$ix,1:ncol(Obesity_igraph)]\n\n\n\nigraph_try <- Obesity_igraph\nigraph_try3 <- igraph_try\nigraph_try4 <- igraph_try3\n\nigraph_try4$RNDM_ADMISSION_DATE <- strptime(igraph_try4$RNDM_ADMISSION_DATE,format='%m/%d/%Y %H:%M')\n\n\n\n#     Sorts by RNDM_ADMISSION_DATE\nigraph_try$RNDM_ADMISSION_DATE <- as.POSIXlt(igraph_try$RNDM_ADMISSION_DATE, format = '%m/%d/%Y:%h:%m')\nigraph_try5 <- igraph_try4[order(igraph_try4$PAT_DEIDENTIFIED,igraph_try4$RNDM_ADMISSION_DATE),]\n#  ^ official dataset for format 1\n\n\nigraph_format_1 <- igraph_try5\nigraph_format_1 <- subset(igraph_format_1, select=c(\"PAT_DEIDENTIFIED\", \"NPI\"))\n\n\n###############################################################################################\n###############################################################################################\n\n\n\nNetworking <- function(grouping_ids,node_ids){\n  l = length(grouping_ids) # Check to see how many Rows are in the data\n  row = 1 # We initiate our starting Row, that is we start by looking at the first row.\n  network <- c() # We initiate our result to be an empty matrix\n  while(row < l){ # We iterate through every row in the data\n    # Let's call this While Loop #1\n    begin_row = row # Keep track of which Row we started on\n    group <- grouping_ids[row] # Keeps track of the group number (or patient number)\n    prov1 <- c(node_ids[row]) # Initiates the first provider for this group\n    while((row < l) && (grouping_ids[row] == grouping_ids[row+1])){ # Check to see if next patient is the same\n      # Let's callt his While Loop #2\n      prov1 <- c(prov1,node_ids[row+1]) # Appends the provider of the group\n      row <- row + 1 # Updates the row number, so that we can look at the next patient\n    }\n    if(begin_row != row){ # This does the check to see if the patient only had one provider that he saw,\n      # If he only sees one provider then we skip this portion and ignore the patient completely\n      prov2 <- prov1[-1] # Get the 2nd provider\n      last <- row-begin_row # Essentially gives us how many times the patient traveled from provider to provider\n      prov1 <- prov1[-(last+1)] # Get the 1st provider\n      group <- rep(group,last) # replicate the patient_id to have the same length as the number of providers\n      grp_mat <- cbind(group,prov1,prov2) # This is a temporary storage of how the individual patient moved between providers\n      network <- rbind(network,grp_mat) # Append the individual's route to All patient routes.\n    }\n    row <- row + 1\n  }\n  return(network)\n}\n\n\nigraph_format_2 <- Networking(igraph_format_1$PAT_DEIDENTIFIED,igraph_format_1$NPI)\n\nlibrary(igraph)\n# build a graph from the above matrix\ngraph1 <- graph(igraph_format_2, n=max(igraph_format_2), directed=FALSE)\n# remove loops\ng <- simplify(g)\n# set labels and degrees of vertices\nV(g)$label <- V(g)$name\nV(g)$degree <- degree(g)\n\n\n\n###############################################################################################\n###############################################################################################\n\n\n\n#     Omit distance traveled over 100 miles (160.934 kilometers)\nObesity_distance <- Obesity_7\nObesity_distance <- Obesity_distance[!(Obesity_distance$Pat_Prov.dist.1 > 50), ]\n\n#     Plot distance vs. BMI_CAT\nplot(Obesity_distance$Pat_Prov.dist.1,Obesity_distance$BMI_CAT, main=\"Distance to Provider vs. BMI Category\", \n     xlab=\"Distance (kilometers)\", ylab=\"BMI Category\")\nboxplot(Pat_Prov.dist.1~BMI_CAT,data=Obesity_distance, main=\"Distance to Provider vs. BMI Category\", \n        xlab=\"BMI Category\", ylab=\"Distance (kilometers)\")\n\nattach(Obesity_distance)\nfreq <- subset(Pat_Prov.dist.1,BMI_CAT==2)\nsummary(freq)\n\nObesity_7$Median_income_est <- as.numeric(as.character(Obesity_7$Median_income_est))\n\nplot(Obesity_7$Median_income_est,Obesity_7$BMI, main=\"Median Income Estimate vs. BMI\", xlab=\"Median Income Estimate ($)\"\n     ,ylab=\"BMI\")\nboxplot(Median_income_est~BMI_CAT, data=Obesity_7, main=\"Median Income Estimate vs. BMI Category\", xlab=\"BMI Category\"\n        ,ylab=\"Median Income Estimate ($)\")\n\n\n\n\n\n#     6.17.16 for Martin\n#     Unique patient ID demographics\nObesity_data_unique <- subset(Obesity_data, select = c(\"PAT_DEIDENTIFIED\",\"VISIT_ID\",\"SEX\", \n                                                  \"ETHNICITY\"))\nObesity_data_unique <- Obesity_data_unique[!duplicated(PAT_DEIDENTIFIED),]\ndescribe(Obesity_data_unique$SEX)\n#    Female (62860, 55%), Male (51236, 45%), Unknown (1, 0%) \ndescribe(Obesity_data_unique$ETHNICITY)\n#    (80, 0%), Hispanic or Latino (7099, 6%), Not Hispanic or Latino (106379, 93%) \n#    Patient Refused (539, 0%) \n\n\n\n\n",
    "created" : 1480106624766.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3997403156",
    "id" : "C34AC57E",
    "lastKnownWriteTime" : 1466089311,
    "path" : "~/Desktop/Obesity R Stuff/URMC_Obesity_Code.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}